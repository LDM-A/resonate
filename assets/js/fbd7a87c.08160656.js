"use strict";(self.webpackChunkresonate=self.webpackChunkresonate||[]).push([[39],{3174:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var t=s(5893),r=s(1151);const i={sidebar_position:2},a="Quickstart",o={id:"getting-started/quickstart",title:"Quickstart",description:"Prerequisites",source:"@site/docs/getting-started/quickstart.md",sourceDirName:"getting-started",slug:"/getting-started/quickstart",permalink:"/getting-started/quickstart",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Resonate",permalink:"/"},next:{title:"SDKs",permalink:"/category/sdks"}},c={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Steps",id:"steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"quickstart",children:"Quickstart"}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"NodeJS"}),"\n",(0,t.jsx)(n.li,{children:"ExpressJS"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"steps",children:"Steps"}),"\n",(0,t.jsx)(n.p,{children:"Install the Resonate SDK and Express."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install @resonatehq/sdk\nnpm install express @types/express\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Create a file named ",(0,t.jsx)(n.strong,{children:"app.ts"})," and write a simple Resonate application combining durable async await with an express web server.\nThis application simulates charging a user for a song."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",metastring:'title="app.ts"',children:'import { Resonate, Context } from "@resonatehq/sdk";\nimport express, { Request, Response } from "express";\n\ntype User = {\n  id: number;\n};\n\ntype Song = {\n  id: number;\n  price: number;\n};\n\nasync function purchase(ctx: Context, user: User, song: Song): Promise<{ charged: boolean; granted: boolean }> {\n  const charged = await ctx.run(charge, user, song);\n  const granted = await ctx.run(access, user, song);\n\n  return { charged, granted };\n}\n\nasync function charge(ctx: Context, user: User, song: Song): Promise<boolean> {\n  console.log(`Charged user:${user.id} $${song.price}.`);\n  return true;\n}\n\nasync function access(ctx: Context, user: User, song: Song): Promise<boolean> {\n  console.log(`Granted user:${user.id} access to song:${song.id}.`);\n  return true;\n}\n\n// Initialize Resonate app\nconst resonate = new Resonate();\nresonate.register("purchase", purchase);\n\n// Initialize Express app\nconst app = express();\napp.use(express.json())\n\napp.post("/purchase", async (req: Request, res: Response) => {\n  const user = { id: req.body?.user ?? 1 };\n  const song = { id: req.body?.song ?? 1, price: 1.99 };\n\n  try {\n    res.send(await resonate.run("purchase", `purchase-${user.id}-${song.id}`, user, song));\n  } catch (err) {\n    res.status(500).send("Could not purchase song");\n  }\n});\n\napp.listen(3000, () => {\n  console.log("Listening on port 3000");\n});\n'})}),"\n",(0,t.jsx)(n.p,{children:"Now we can start the application."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"ts-node app.ts\n"})}),"\n",(0,t.jsx)(n.p,{children:"Next, call the endpoint providing a user and song id in the payload of the request."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"curl \\\n  -X POST \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"user\": 1, \"song\": 1}' \\\n  http://localhost:3000/purchase\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Play around with providing different values for both the user and song id. Notice that multiple requests with the same ids will not result in duplicated charges. This is because the identity of a purchase is defined by the value provided to ",(0,t.jsx)(n.code,{children:"run"})," and, in contrast to a regular function call, outlives a single execution."]}),"\n",(0,t.jsxs)(n.p,{children:["By default, Resonate uses a volatile promise store that stores promises in memory. See ",(0,t.jsx)(n.a,{href:"/sdks/typescript#initialize-with-durable-store",children:"how to initialize with a durable store"})," for details on how to connect to the Resonate server."]})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>o,a:()=>a});var t=s(7294);const r={},i=t.createContext(r);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);