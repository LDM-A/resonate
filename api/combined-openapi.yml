openapi: 3.0.0
info:
  title: Combined API
  description: API documentation for Promises, Tasks, Locks, and Schedules.
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: https://resonatehq.io # Replace with your actual API base URL
    description: Website
security: [] # Explicitly state no security is required globally
paths:
  /promises:
    post:
      tags:
        - Promises
      summary: Create a promise
      description: Create a promise
      operationId: createPromise
      parameters:
        - $ref: "#/components/parameters/RequestIdHeader"
        - $ref: "#/components/parameters/IdempotencyKeyHeader"
        - $ref: "#/components/parameters/StrictHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePromiseReq"
      responses:
        200:
          description: Operation deduplicated, Promise fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Promise"
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Promise"
        400:
          description: Invalid request
        403:
          description: Forbidden request
        409:
          description: Promise already exists

    get:
      tags:
        - Promises
      summary: Search promises
      description: Search promises
      operationId: searchPromises
      parameters:
        - $ref: "#/components/parameters/RequestIdHeader"
        - name: id
          in: query
          description: |
            Search promises for matching IDs, can include wildcards.

            For example:
            - "foo/*" matches all IDs starting with "foo/"
            - "*/bar" matches all IDs starting with "bar/"
            - "foo/*/bar" matches all IDs starting with "foo/" and ending with "/bar"
          schema:
            type: string
        - name: state
          in: query
          description: Search promises for matching states
          schema:
            type: string
            enum:
              - pending
              - resolved
              - rejected
        - name: tags
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            additionalProperties:
              type: string
        - name: limit
          in: query
          description: Number of results
          schema:
            type: integer
        - name: cursor
          in: query
          description: Cursor for pagination
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchPromisesResp"
        400:
          description: Invalid request

  /promises/{id}:
    get:
      tags:
        - Promises
      summary: Get a promise
      description: Get a promise
      operationId: getPromise
      parameters:
        - $ref: "#/components/parameters/IdPath"
        - $ref: "#/components/parameters/RequestIdHeader"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Promise"
        400:
          description: Invalid request
        404:
          description: Promise not found

    patch:
      tags:
        - Promises
      summary: Complete a promise
      description: Complete a promise
      operationId: completePromise
      parameters:
        - $ref: "#/components/parameters/IdPath"
        - $ref: "#/components/parameters/RequestIdHeader"
        - $ref: "#/components/parameters/IdempotencyKeyHeader"
        - $ref: "#/components/parameters/StrictHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompletePromiseReq"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Promise"
        400:
          description: Invalid request
        403:
          description: Forbidden request
        404:
          description: Promise not found
  /locks/acquire:
    post:
      summary: Acquire lock
      description: Acquire a distributed lock
      operationId: acquireLock
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Lock"
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Lock"

  /locks/heartbeat:
    post:
      summary: heartbeat
      description: update heartbeat for all locks that match the processId
      operationId: heartbeat
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HeartbeatRequest"
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HeartbeatResponse"

  /locks/release:
    post:
      summary: Release lock
      description: Release a distributed lock
      operationId: releaseLock
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReleaseLockRequest"
        required: true
      responses:
        "200":
          description: successful operation
components:
  parameters:
    # PATH PARAMETERS
    IdPath:
      name: id
      in: path
      required: true
      description: The promise ID
      schema:
        type: string

    # HEADER PARAMETERS
    IdempotencyKeyHeader:
      name: idempotency-key
      in: header
      description: Deduplicates multiple requests
      schema:
        type: string
    StrictHeader:
      name: strict
      in: header
      description: If true, deduplicates only when promise state matches the request
      schema:
        type: boolean
    RequestIdHeader:
      name: request-id
      in: header
      description: Unique ID for each request
      schema:
        type: string

  schemas:
    Promise:
      type: object
      required:
        - id
        - state
        - timeout
        - param
        - value
        - tags
      properties:
        id:
          type: string
        state:
          $ref: "#/components/schemas/PromiseState"
        param:
          $ref: "#/components/schemas/PromiseValue"
        value:
          $ref: "#/components/schemas/PromiseValue"
        timeout:
          type: integer
          format: int64
        idempotencyKeyForCreate:
          type: string
          readOnly: true
        idempotencyKeyForComplete:
          type: string
          readOnly: true
        tags:
          type: object
          additionalProperties:
            type: string
        createdOn:
          type: integer
          readOnly: true
        completedOn:
          type: integer
          readOnly: true

    PromiseState:
      type: string
      enum:
        - PENDING
        - RESOLVED
        - REJECTED
        - REJECTED_CANCELED
        - REJECTED_TIMEDOUT

    PromiseStateComplete:
      type: string
      enum:
        - RESOLVED
        - REJECTED
        - REJECTED_CANCELED

    PromiseValue:
      type: object
      required:
        - headers
      properties:
        headers:
          type: object
          additionalProperties:
            type: string
        data:
          type: string

    CreatePromiseReq:
      type: object
      required:
        - id
        - timeout
      properties:
        id:
          type: string
        timeout:
          type: integer
          format: int64
        param:
          $ref: "#/components/schemas/PromiseValue"
        tags:
          type: object
          additionalProperties:
            type: string

    CompletePromiseReq:
      type: object
      required:
        - state
      properties:
        state:
          $ref: "#/components/schemas/PromiseStateComplete"
        value:
          $ref: "#/components/schemas/PromiseValue"

    SearchPromisesResp:
      type: object
      properties:
        cursor:
          type: string
        promises:
          type: array
          items:
            $ref: "#/components/schemas/Promise"

    Lock:
      type: object
      properties:
        resourceId:
          type: string
        processId:
          type: string
        executionId:
          type: string
        expiryInSeconds:
          type: integer
          format: int64
        expiresAt:
          type: integer
          format: int64
          readOnly: true
      required:
        - resourceId
        - processId
        - executionId
        - expiryInSeconds

    HeartbeatRequest:
      type: object
      properties:
        processId:
          type: string
      required:
        - processId

    HeartbeatResponse:
      type: object
      properties:
        locksAffected:
          type: integer
          format: int64

    ReleaseLockRequest:
      type: object
      properties:
        resourceId:
          type: string
        executionId:
          type: string
      required:
        - resourceId
        - executionId
